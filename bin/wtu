#! /usr/bin/env node

const program = require('commander');
const chalk = require('chalk');
const path = require('path');
const fs = require('fs');

const { transform } = require('../src/index');
const { log } = require('../src/utils/utils');
const pkg = require('../package.json');

const updater = require('pkg-updater');

//检查更新
updater({ 'pkg': pkg }).then(() => {

    process.on('exit', () => console.log());

    program
        .version(pkg.version)
        .usage('[options]')
        .option('-i, --input', 'the input path for miniprogram project')
        .option('-c, --cli', 'the type of output project is vue-cli, which default value is false', false)
        .option('-z, --vant', 'transform vant-weapp project to uni-app, automatic check', false)
        .option('-r, --rename', 'rename wx.xxx() to uni.xxx(), which default value is true', true)
        .option('-m, --merge', 'merge wxss file into vue file, which default value is false', false)
        .option('-f, --repair', 'repair javascript, which default value is false', false)
        .parse(process.argv);

    program.on('--help', function () {
        console.log();
        console.log('  Examples:');
        console.log();
        console.log(chalk.gray('    # transform a miniprogram project to uni-app project'));
        console.log();
        console.log('    $ wtu -i ./miniprogram-project [-z -r -m]');
        console.log();
    });

    function help() {
        if (program.args.length < 1) {
            return program.help();
        }
    }

    help();

    let src = program.args[0];
    let dist = "";
    let isVueAppCliMode = program.cli;
    let isTransformWXS = program.wxs;
    let isVantProject = program.vant;
    let isRenameWxToUni = program.rename;
    let isMergeWxssToVue = program.merge;
    let isRepair = program.repair;

    let options = {
        dist,
        isVueAppCliMode,
        isTransformWXS,
        isVantProject,
        isRenameWxToUni,
        isMergeWxssToVue,
        isRepair
    }

    src = path.resolve(process.cwd(), src);

    if (!fs.existsSync(src)) {
        log(`The source folder dose not exist: ${src}`);
        process.exit();
    }

    transform(src, options);
});
